#!/usr/bin/env python3
"""
ペット図鑑UIのテスト
UI要素の動作確認を行う
"""

import sys
import os
import pygame
import pygame_gui
from pathlib import Path

# プロジェクトルートをPythonパスに追加
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from src.ui.pet_collection_ui import PetCollectionUI
from src.systems.pet_collection import PetCollection

def test_pet_ui():
    """ペット図鑑UIのテスト"""
    print("🎮 ペット図鑑UIテスト開始")
    print("=" * 50)
    
    # Pygameの初期化
    pygame.init()
    screen = pygame.display.set_mode((1280, 720))
    pygame.display.set_caption("ペット図鑑UIテスト")
    clock = pygame.time.Clock()
    
    # UIマネージャーの初期化
    ui_manager = pygame_gui.UIManager((1280, 720))
    
    try:
        # ペット図鑑UIの初期化
        pet_ui = PetCollectionUI(screen, ui_manager)
        print("✅ ペット図鑑UIの初期化: 成功")
        
        # UIを表示
        pet_ui.show()
        print("✅ UI表示: 成功")
        
        # テスト用のペット救助
        pet_collection = PetCollection()
        pet_collection.rescue_pet("cat_001", "路地裏", 180)
        pet_collection.rescue_pet("rabbit_001", "茂みの中", 240)
        print("✅ テスト用ペット救助: 完了")
        
        # 統計情報の確認
        stats = pet_collection.get_collection_stats()
        print(f"📊 現在の完成率: {stats['completion_rate']:.1f}%")
        
        running = True
        test_duration = 10  # 10秒間テスト
        start_time = pygame.time.get_ticks()
        
        print(f"🕐 {test_duration}秒間UIテストを実行中...")
        print("   - ESCキーで終了")
        print("   - マウスでUI操作可能")
        
        while running:
            time_delta = clock.tick(60) / 1000.0
            current_time = pygame.time.get_ticks()
            
            # イベント処理
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                elif event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        running = False
                
                # UIイベント処理
                ui_manager.process_events(event)
                pet_ui.handle_event(event)
            
            # 更新
            ui_manager.update(time_delta)
            pet_ui.update(time_delta)
            
            # 描画
            screen.fill((240, 248, 255))  # 背景色
            ui_manager.draw_ui(screen)
            pet_ui.draw(screen)
            
            pygame.display.flip()
            
            # 自動終了（10秒後）
            if current_time - start_time > test_duration * 1000:
                running = False
        
        print("✅ UIテスト完了")
        
    except Exception as e:
        print(f"❌ UIテストエラー: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        pygame.quit()
        print("🎉 ペット図鑑UIテスト終了")

if __name__ == "__main__":
    test_pet_ui()
